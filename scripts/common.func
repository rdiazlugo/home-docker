variables() {
  LC_APP=$(echo ${APP,,} | tr -d ' ') # This function sets the LC_APP variable by converting the value of the APP variable to lowercase and removing any spaces.
  var_app="$LC_APP-install"
  # check if INSTALLER_PATH exists, otherwise, use a default
  if [ -z "$INSTALLER_PATH" ]; then
    INSTALLER_PATH="/root/install.sh"
  fi
}

deb_upgrade() {
  echo ">> Updating OS"
  apt update 1>/dev/null
  apt upgrade -y 1>/dev/null
  apt autoremove -y 1>/dev/null
  echo "<< OS Updated successfully!"
}

# Prints info with ASCII
# taken from https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/misc/build.func
header_info() {
  if [ -f /etc/debian_version ]; then
    # Debian/Ubuntu
    apt-get install -y figlet 1> /dev/null
  elif [ -f /etc/alpine-release ]; then
    # Alpine Linux
    apk add --no-cache figlet ncurses 1> /dev/null
    export TERM=xterm
  else
    echo "Unsupported OS"
    return 1
  fi

  term_width=$(tput cols 2>/dev/null || echo 120)  # Fallback to 120 columns
  ascii_art=$(figlet -f slant -w "$term_width" "$APP")
  clear
  cat <<EOF
$ascii_art
EOF
}

docker_add_repo() {
  apt update 1>/dev/null
  apt install ca-certificates curl 1>/dev/null
  install -m 0755 -d /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
  chmod a+r /etc/apt/keyrings/docker.asc

  # Add the repository to Apt sources:
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    tee /etc/apt/sources.list.d/docker.list 1> /dev/null
  apt update
}

docker_install() {
  echo ">> Installing Docker"
  docker_add_repo
  apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 1>/dev/null
  echo "<< Docker installed!"
}

podman_install() {
  deb_upgrade
  echo ">> Installing Podman"
  apt install -y podman podman-compose 1>/dev/null
  echo "<< Podman installed!"
}

podman_composer_install() {
  deb_upgrade
  echo ">> Installing Podman Compose"
  apt install -y podman docker-compose 1>/dev/null
  echo "<< Podman Compose installed!"
}

podman_container_maintenance() {
  echo ">> container maintenance..."
  echo "stopping..."
  podman stop -i "$PODMAN_NAME"
  echo "removing previous containers..."
  podman rm -i "$PODMAN_NAME"
  echo "pulling latest image..."
  podman pull "$PODMAN_IMAGE" 1>/dev/null || { echo "Failed to pull image: $PODMAN_IMAGE"; exit 1; }
  echo "<< container maintenance done"
}

podman_images_cleanup() {
  echo ">> cleaning up unused images..."
  podman image prune --force --all
  echo "<< done"
}

check_environment_variable() {
  echo ">> Checking ENV variable=$1"
  # Check the parameter is not empty
  if [ -z "$1" ]; then
    echo "No ENV variable name provided."
    exit 1
  fi
  local VAR_NAME=$1
  # Check if any env variable with that name exists
  if [ -z "${!VAR_NAME}" ]; then
    echo "ENV variable $VAR_NAME is not set."
    exit 1
  fi
}

set_reboot_cron() {
  local CRON_SCRIPT="@reboot bash $INSTALLER_PATH"
  if crontab -l | grep -q "$CRON_SCRIPT"; then
    echo "Crontab already contains the script."
  else
    (crontab -l 1>/dev/null; echo "$CRON_SCRIPT") | crontab -
    echo "Added crontab to run on startup"
  fi
}

check_file_exists() {
  if [ ! -f "$1" ]; then
    echo "File $1 not found."
    exit 1
  fi
}

podman_create_volume() {
  echo ">> Creating volume..."
  podman volume create "$1" 1>/dev/null
}

podman_compose_maintenance() {
  echo ">> container maintenance..."
  echo "stopping..."
  podman-compose down
  echo "removing previous containers..."
  podman-compose rm -f
  echo "pulling latest images..."
  podman-compose pull
  echo "<< container maintenance done"
}
